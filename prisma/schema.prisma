// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 관리자
model Admin {
  id        Int      @id @default(autoincrement())
  password  String   // bcrypt 해시
  createdAt DateTime @default(now())
}

// 사용자 (학생)
model User {
  id            Int      @id @default(autoincrement())
  name          String
  learningCode  String   @unique // 학습 코드 (예: "0115", "2024001")
  role          String   @default("student")
  level         Int      @default(1)
  totalPoints   Int      @default(0)
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  createdAt     DateTime @default(now())

  // Relations
  vocabularyProgress VocabularyProgress[]
  quizResults        QuizResult[]
  readingAnswers     ReadingAnswer[]
  achievements       Achievement[]
  learningLogs       LearningLog[]
  dailyStreaks       DailyStreak[]
  assignments        Assignment[]

  @@map("users")
}

// 교재
model Textbook {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())

  // Relations
  units       Unit[]
  assignments Assignment[]

  @@map("textbooks")
}

// 단원
model Unit {
  id          Int    @id @default(autoincrement())
  textbookId  Int
  unitNumber  Int
  title       String
  description String?

  // Relations
  textbook        Textbook          @relation(fields: [textbookId], references: [id], onDelete: Cascade)
  vocabulary      Vocabulary[]
  readingPassages ReadingPassage[]
  quizResults     QuizResult[]
  assignments     Assignment[]

  @@map("units")
}

// 단어
model Vocabulary {
  id                   Int     @id @default(autoincrement())
  unitId               Int
  problemNumber        Int?
  word                 String
  meanings             String  // JSON: ["의미1", "의미2"]
  partOfSpeech         String?
  pronunciation        String?
  exampleSentence      String?
  sentenceTranslation  String?
  audioUrl             String?

  // Relations
  unit               Unit                 @relation(fields: [unitId], references: [id], onDelete: Cascade)
  vocabularyProgress VocabularyProgress[]

  @@map("vocabulary")
}

// 독해 지문
model ReadingPassage {
  id            Int      @id @default(autoincrement())
  unitId        Int
  problemNumber Int
  title         String?
  fullText      String
  lines         String   // JSON: [{lineIndex, english, korean}]
  createdAt     DateTime @default(now())

  // Relations
  unit           Unit            @relation(fields: [unitId], references: [id], onDelete: Cascade)
  readingAnswers ReadingAnswer[]

  @@map("reading_passages")
}

// 과제 할당
model Assignment {
  id                  Int       @id @default(autoincrement())
  studentId           Int
  textbookId          Int
  unitId              Int
  assignmentType      String    // "vocabulary" | "reading" | "both"
  vocabularyItems     String?   // JSON: {all: true} | {problem_numbers: [1,2]}
  readingPassageIds   String?   // JSON: [1, 3, 5]
  dueDate             DateTime?
  status              String    @default("assigned") // "assigned" | "in_progress" | "completed"
  createdAt           DateTime  @default(now())

  // Relations
  student  User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  textbook Textbook @relation(fields: [textbookId], references: [id], onDelete: Cascade)
  unit     Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@map("assignments")
}

// 단어 학습 진도
model VocabularyProgress {
  id            Int      @id @default(autoincrement())
  studentId     Int
  vocabularyId  Int
  status        String   @default("learning") // "learning" | "mastered"
  isBookmarked  Boolean  @default(false)
  studyCount    Int      @default(0)
  lastStudiedAt DateTime @default(now())

  // Relations
  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  vocabulary Vocabulary @relation(fields: [vocabularyId], references: [id], onDelete: Cascade)

  @@unique([studentId, vocabularyId])
  @@map("vocabulary_progress")
}

// 퀴즈 결과
model QuizResult {
  id             Int      @id @default(autoincrement())
  studentId      Int
  unitId         Int
  quizType       String   // "speed" | "subjective" | "sentence"
  score          Int
  totalQuestions Int
  correctAnswers Int
  comboMax       Int      @default(0)
  timeTaken      Int      // seconds
  pointsEarned   Int
  createdAt      DateTime @default(now())

  // Relations
  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)
  unit    Unit @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@map("quiz_results")
}

// 독해 답안 (버전 관리)
model ReadingAnswer {
  id             Int      @id @default(autoincrement())
  studentId      Int
  passageId      Int
  versions       String   // JSON: [{version, translations, submittedAt, timeSpent, type}]
  currentVersion Int      @default(1)
  totalAttempts  Int      @default(1)
  createdAt      DateTime @default(now())
  lastModifiedAt DateTime @updatedAt

  // Relations
  student User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  passage ReadingPassage @relation(fields: [passageId], references: [id], onDelete: Cascade)

  @@unique([studentId, passageId])
  @@map("reading_answers")
}

// 배지
model Achievement {
  id        Int      @id @default(autoincrement())
  studentId Int
  badgeType String
  badgeName String
  earnedAt  DateTime @default(now())

  // Relations
  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

// 학습 로그
model LearningLog {
  id           Int      @id @default(autoincrement())
  studentId    Int
  activityType String
  pointsEarned Int
  metadata     String?  // JSON
  createdAt    DateTime @default(now())

  // Relations
  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("learning_logs")
}

// 일일 학습 기록
model DailyStreak {
  id                  Int      @id @default(autoincrement())
  studentId           Int
  date                DateTime
  studyTime           Int      // seconds
  pointsEarned        Int
  activitiesCompleted Int

  // Relations
  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, date])
  @@map("daily_streaks")
}
